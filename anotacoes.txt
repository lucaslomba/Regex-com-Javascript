. -> qualquer caracter
* -> o asterisco que serve para definir uma quantidade de chars, zero ou mais vezes
{ e } -> as chaves que servem para definir uma quantidade de caracteres específicas que é desejado encontrar

\d => digito procurado nos numeros
\d\d\d => encontraria locais com 3 numeros seguidos
\. => faz com que interprete como um ponto de fato

-> EXEMPLO DE COMO IDENTIFICAR UM CPF
\d\d\d\.\d\d\d\.\d\d\d-\d\d

-> Quantifier = Caractere especial que define quantas vezes um caractere deve aparecer

-> EXEMPLO DE COMO IDENTIFICAR UM CPF COM QUANTIFIER
\d{3}\.\d{3}\.\d{3}-\d{2}

-> EXERCICIO
Encontrar o CNPJ
Solução => \d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}

-> EXERCICIO
Encontrar o CEP
Solução => \d{5}-\d{3}

-> Um IP pode ter de um a três algarismos a cada ponto
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

? -> siguinifica que algo não é obrigatorio
Exemplo de como usar em um CPF caso ele nao tenha sido preenchido com a formatação correta
\d{3}\.?\d{3}\.?\d{3}-?\d{2} ou \d{3}\.{0,1}\d{3}\.{0,1}\d{3}-{0,1}\d{2} 

-> Defininindo um conjunto de caracteres (Um ou outro, no caso - ou .)
Exemplo de como usar em um CPF caso ele nao tenha sido preenchido com a formatação correta
\d{3}\.?\d{3}\.?\d{3}[-\.]?\d{2}


===================================================== AUMENTANDO O NIVEL ======================================================

-> Data
Usar o \s+ para livrar de espaços execesivos

? -> 0 ou 1 vez
* -> 0 ou mais vezes
+ -> 1 ou mais vezes
{n} -> exatamente N vezes
{n,} -> no minimo N vezes
{n, m} -> minimo N vezes e maximo M vezes
[A-Z] -> um caractere maiusculo

[1-3]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+[12]\d{3}

-> Validar placa veiculo
[A-Z]{3}-\d{4}

[A-Za-z][A-Za-z1-9]{1-9}

============================================== COMO USAR DATA DE FORMA MAIS LEGIVEL JS ========================================
Em vez de fazer -> [1-3]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+[12]\d{3}

fazemos:
var DIA  = "[0123]?\d"; 
var _DE_ = "\s+de\s+";
var MES  = "[A-Za-z][a-zç]{1,8}";
var ANO  = "[12]\d{3}";

var stringRegex = DIA + _DE_ +  MES + _DE_ + ANO;

var objetoRegex  = new RegExp(stringRegex, 'g');

=============================================================== ANCORAS ========================================================
-> Ancora é uma forma de encontrar uma posição dentro do texto (Devolve uma posição)

\b -> Word boundary

Exemplo -> \bde\b encontraria todas as sequencias "de" do texto

o \b avalia baseado nos Word chars se a sequencia é extamente a passada

^ -> definir qual o inicio que deseja

Exemplo -> ^http://

$ -> final que deseja

Exemplo validando URL -> ^https://+\.html$

================================================================= GRUPOS ========================================================
Grupo é definido atraves de parenteses ()

?: -> pede que nao retorne aquele grupo (Non-capturing-group)

Usando a data novamente
([1-3]?\d)\s+(?:de\s+)?([A-Z][a-zç]{3,8})\s+(?:de\s+)?([12]\d{3})

Desafio E-mail Alura
([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)


Desafio E-mail Alura 2
^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$

Explicação:

a regex usa âncoras no início ^ e fim $ para garantir o match inteiro;
antes do @, temos: ^([\w-]\.?)+
definimos uma classe com word-chars e hífen, seguido por um ponto opcional: [\w-]\.?
essa classe pode se repetir uma ou mais vezes, então criamos um grupo e + ao final: ([\w-]\.?)+
depois do @, temos:
([\w-]+\.)+, que é bastante parecido com o anterior ao @, porém com o . obrigatório,
([A-Za-z]{2,4})+$, que é o final da nossa regex, seleciona o domínio do email, como br, com, us. O mínimo de letras dessa parte final devem ser 2 e no máximo 4.
Há vários exemplo complexos disponíveis na web, mas lembre-se que a autenticidade de um email só pode ser verificada enviando um email para usuário.

Desafio do correio
([\w\s]+)\|(?:\d\d\/\d\d\/\d\d\d\d)\|([\w\s]+)\|(\d{1,4})\|(\d{5}-\d{3})\|(?:[\w\s]{10,})

Backreference -> Referenciando a aulgum grupo (Tipo um if) 
</\1>